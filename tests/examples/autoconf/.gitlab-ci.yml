image: hansroh/ubuntu:dep
services:
  - docker:dind

stages:
  - test
  - build
  - deploy

variables:
  TASK_DEFINITION_NAME: "ecs-demo"
  CLUSTER_NAME: "ecs-demo"
  SERVICE_NAME: "ecs-demo"
  COMMIT_REPR: "$CI_COMMIT_TITLE <$GITLAB_USER_NAME> $CI_PIPELINE_URL"
  REPO: "$CI_REGISTRY_IMAGE"
  REPO_NGINX: "$CI_REGISTRY_IMAGE/nginx"

.tag_name: &tag_name
  - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"
  - IMAGE0="$REPO_NGINX:$IMAGE_TAG"
  - IMAGE1="$REPO:$IMAGE_TAG"
  - (test -z $TELEGRAM_TOKEN) && TELEGRAM="echo" || TELEGRAM="telegram"

test:
  stage: test
  variables:
    CONTAINER_NAME: "testapp-dev"
  script:
    - *tag_name
    - $TELEGRAM "start test - $COMMIT_REPR"
    - adduser --disabled-password --shell /bin/bash --gecos "ubuntu" ubuntu
    - chown -R ubuntu:ubuntu .
    - docker-compose -f ./dep/devel.yml up -d
    - docker exec -t -u root $CONTAINER_NAME pip3 install skitai
    - docker exec -d $CONTAINER_NAME ./skitaid.py --devel --port 5000
    - docker exec -t $CONTAINER_NAME wait-for-it.sh localhost:5000 -t 30
    - docker exec -t $CONTAINER_NAME /bin/bash -c "cd tests && ./test-all.sh"
    - (test $? -ne 0) && RESULT="test failed" || RESULT="test success"
    - $TELEGRAM "$RESULT - $COMMIT_REPR"
  only:
    - test

build:
  stage: build
  before_script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - docker-compose --version
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - *tag_name
  script:
    - $TELEGRAM "start build - $COMMIT_REPR"
    - docker-compose -f dep/production.yml build
    - docker-compose -f dep/production.yml push
    - echo "push $IMAGE0"
    - docker image tag $REPO_NGINX:latest $IMAGE0
    - docker push $IMAGE0
    - echo "push $IMAGE1"
    - docker image tag $REPO:latest $IMAGE1
    - docker push $IMAGE1
    - $TELEGRAM "build finished - $COMMIT_REPR"
  only:
    - master

deploy:
  stage: deploy
  script:
    - *tag_name
    - $TELEGRAM "start deploy - $COMMIT_REPR"
    - echo "IMAGE_TAG $IMAGE_TAG"
    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$TASK_DEFINITION_NAME")
    - NEW_TASK_DEFINITION=$(echo "$TASK_DEFINITION" | jq --arg IMAGE0 "$IMAGE0" --arg IMAGE1 "$IMAGE1" '.taskDefinition | .containerDefinitions[0].image = $IMAGE0 | .containerDefinitions[1].image = $IMAGE1 | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
    - echo "$NEW_TASK_DEFINITION" > ./task.json
    - NEW_TASK_INFO=$(cat ./task.json | xargs -0 aws ecs register-task-definition --cli-input-json)
    - NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
    - aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --task-definition "$TASK_DEFINITION_NAME:$NEW_REVISION"
    - $TELEGRAM "deploy finished - $COMMIT_REPR"
  only:
    - master
